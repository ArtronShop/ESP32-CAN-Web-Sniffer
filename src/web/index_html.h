const char * index_html = "<!DOCTYPE html>\n<html lang=\"th\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ESP32 CAN Web Sniffer</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 20px;\n        }\n\n        .container {\n            background: rgba(255, 255, 255, 0.95);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);\n            padding: 40px;\n            width: 100%;\n            max-width: 800px;\n            transition: all 0.3s ease;\n        }\n\n        .container:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 35px 70px rgba(0, 0, 0, 0.25);\n        }\n\n        .header {\n            text-align: center;\n            margin-bottom: 40px;\n        }\n\n        .header h1 {\n            color: #333;\n            font-size: 2.5rem;\n            font-weight: 700;\n            margin-bottom: 10px;\n            background: linear-gradient(45deg, #667eea, #764ba2);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-clip: text;\n        }\n\n        .header p {\n            color: #666;\n            font-size: 1.1rem;\n        }\n\n        .controls {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            gap: 30px;\n            margin-bottom: 40px;\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n        }\n\n        .control-group label {\n            font-weight: 600;\n            color: #333;\n            font-size: 0.95rem;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n\n        .baud-selector {\n            position: relative;\n        }\n\n        .baud-selector select {\n            width: 100%;\n            padding: 15px 20px;\n            border: 2px solid #e1e5e9;\n            border-radius: 12px;\n            font-size: 1rem;\n            background: white;\n            color: #333;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            appearance: none;\n            background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e\");\n            background-position: right 12px center;\n            background-repeat: no-repeat;\n            background-size: 16px;\n            padding-right: 45px;\n        }\n\n        .baud-selector select:focus {\n            outline: none;\n            border-color: #667eea;\n            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n        }\n\n        .connect-btn {\n            padding: 15px 30px;\n            background: linear-gradient(45deg, #4CAF50, #45a049);\n            color: white;\n            border: none;\n            border-radius: 12px;\n            font-size: 1.1rem;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            position: relative;\n            overflow: hidden;\n        }\n\n        .connect-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 10px 25px rgba(76, 175, 80, 0.3);\n        }\n\n        .connect-btn.connected {\n            background: linear-gradient(45deg, #f44336, #d32f2f);\n        }\n\n        .connect-btn.connected:hover {\n            box-shadow: 0 10px 25px rgba(244, 67, 54, 0.3);\n        }\n\n        .connect-btn::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 100%;\n            height: 100%;\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n            transition: all 0.5s;\n        }\n\n        .connect-btn:hover::before {\n            left: 100%;\n        }\n\n        .export-btn {\n            padding: 15px 30px;\n            background: linear-gradient(45deg, #2196F3, #1976D2);\n            color: white;\n            border: none;\n            border-radius: 12px;\n            font-size: 1.1rem;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            position: relative;\n            overflow: hidden;\n            width: 200px;\n            margin: 0 auto;\n            display: inline-block;\n        }\n\n        .export-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 10px 25px rgba(33, 150, 243, 0.3);\n        }\n\n        .export-btn:disabled {\n            background: #ccc;\n            cursor: not-allowed;\n            transform: none;\n            box-shadow: none;\n        }\n\n        .export-btn::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 100%;\n            height: 100%;\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n            transition: all 0.5s;\n        }\n\n        .export-btn:hover::before {\n            left: 100%;\n        }\n\n        .clear-btn {\n            padding: 15px 30px;\n            background: linear-gradient(45deg, #f44336, #d32f2f);\n            color: white;\n            border: none;\n            border-radius: 12px;\n            font-size: 1.1rem;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            position: relative;\n            overflow: hidden;\n            width: 200px;\n            margin: 0 auto;\n            display: inline-block;\n        }\n\n        .clear-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 10px 25px rgba(244, 67, 54, 0.3);\n        }\n\n        .clear-btn:disabled {\n            background: #ccc;\n            cursor: not-allowed;\n            transform: none;\n            box-shadow: none;\n        }\n\n        .clear-btn::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 100%;\n            height: 100%;\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n            transition: all 0.5s;\n        }\n\n        .clear-btn:hover::before {\n            left: 100%;\n        }\n\n        .search-input {\n            width: 100%;\n            padding: 15px 20px;\n            border: 2px solid #e1e5e9;\n            border-radius: 12px;\n            font-size: 1rem;\n            transition: all 0.3s ease;\n            background: white;\n        }\n\n        .search-input:focus {\n            outline: none;\n            border-color: #667eea;\n            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n        }\n\n        .status {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            padding: 20px;\n            background: rgba(102, 126, 234, 0.1);\n            border-radius: 12px;\n            margin-bottom: 30px;\n        }\n\n        .status-indicator {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n\n        .status-dot {\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            background: #f44336;\n            animation: pulse 2s infinite;\n        }\n\n        .status-dot.connected {\n            background: #4CAF50;\n        }\n\n        @keyframes pulse {\n            0% { opacity: 1; }\n            50% { opacity: 0.5; }\n            100% { opacity: 1; }\n        }\n\n        .message-area {\n            background: #f8f9fa;\n            border: 2px solid #e1e5e9;\n            border-radius: 12px;\n            padding: 20px;\n            min-height: 300px;\n            font-family: 'Courier New', monospace;\n            font-size: 0.9rem;\n            color: #333;\n            overflow-y: auto;\n            position: relative;\n            margin-bottom: 20px;\n        }\n\n        .message-area::before {\n            content: 'CAN Messages will appear here...';\n            color: #999;\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            font-style: italic;\n        }\n\n        .message-area.has-content::before {\n            display: none;\n        }\n\n        .can-message {\n            padding: 8px 12px;\n            margin: 5px 0;\n            background: rgba(102, 126, 234, 0.1);\n            border-left: 4px solid #667eea;\n            border-radius: 4px;\n            font-family: monospace;\n            animation: slideIn 0.3s ease;\n        }\n\n        @keyframes slideIn {\n            from {\n                opacity: 0;\n                transform: translateX(-20px);\n            }\n            to {\n                opacity: 1;\n                transform: translateX(0);\n            }\n        }\n\n        @media (max-width: 768px) {\n            .controls {\n                grid-template-columns: 1fr;\n                gap: 20px;\n            }\n            \n            .container {\n                padding: 20px;\n            }\n            \n            .header h1 {\n                font-size: 2rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>CAN Sniffer</h1>\n            <p>Monitor and analyze CAN bus messages in real-time</p>\n        </div>\n\n        <div class=\"controls\">\n            <div class=\"control-group\">\n                <label for=\"baudRate\">Baud Rate</label>\n                <div class=\"baud-selector\">\n                    <select id=\"baudRate\">\n                        <option value=\"125000\">125 kbps</option>\n                        <option value=\"250000\">250 kbps</option>\n                        <option value=\"500000\"selected>500 kbps</option>\n                        <option value=\"1000000\">1 Mbps</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"control-group\">\n                <label>Connection</label>\n                <button id=\"connectBtn\" class=\"connect-btn\">Connect</button>\n            </div>\n\n            <div class=\"control-group\">\n                <label for=\"searchInput\">Search Filter</label>\n                <input type=\"text\" id=\"searchInput\" class=\"search-input\" placeholder=\"Enter CAN ID or data...\">\n            </div>\n        </div>\n\n        <div class=\"status\">\n            <div class=\"status-indicator\">\n                <div id=\"statusDot\" class=\"status-dot\"></div>\n                <span id=\"statusText\">Disconnected</span>\n            </div>\n            <div id=\"messageCount\">Messages: 0</div>\n        </div>\n\n        <div id=\"messageArea\" class=\"message-area\"></div>\n\n        <button id=\"exportBtn\" class=\"export-btn\">Export CSV</button>\n        <button id=\"clearBtn\" class=\"clear-btn\">Clear</button>\n    </div>\n\n    <script>\n        class CANSniffer {\n            constructor() {\n                this.isConnected = false;\n                this.messageCount = 0;\n                this.messages = [];\n                this.filteredMessages = [];\n                this.searchFilter = '';\n                this.socket = null;\n                \n                this.initializeElements();\n                this.bindEvents();\n                // this.startSimulation();\n            }\n\n            initializeElements() {\n                this.baudRateSelect = document.getElementById('baudRate');\n                this.connectBtn = document.getElementById('connectBtn');\n                this.searchInput = document.getElementById('searchInput');\n                this.exportBtn = document.getElementById('exportBtn');\n                this.clearBtn = document.getElementById('clearBtn');\n                this.statusDot = document.getElementById('statusDot');\n                this.statusText = document.getElementById('statusText');\n                this.messageCountElement = document.getElementById('messageCount');\n                this.messageArea = document.getElementById('messageArea');\n            }\n\n            bindEvents() {\n                this.connectBtn.addEventListener('click', () => this.toggleConnection());\n                this.searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));\n                this.exportBtn.addEventListener('click', () => this.exportToCSV());\n                this.clearBtn.addEventListener('click', () => this.clearData());\n                this.baudRateSelect.addEventListener('change', () => this.handleBaudRateChange());\n            }\n\n            toggleConnection() {\n                this.isConnected = !this.isConnected;\n                \n                if (this.isConnected) {\n                    this.connect();\n                } else {\n                    this.disconnect();\n                }\n            }\n\n            connect() {\n                this.connectBtn.textContent = 'Disconnect';\n                this.connectBtn.classList.add('connected');\n                this.statusDot.classList.add('connected');\n                this.statusText.textContent = `Connected (${this.baudRateSelect.value} bps)`;\n\n                this.socket = new WebSocket('ws://localhost:3000/ws');\n                this.socket.onopen = () => this.connected();\n                this.socket.onmessage = (e) => this.messageIn(e);\n                this.socket.onclose = () => this.close();\n            }\n\n            connected() {\n                console.log(\"WebSocket connection established\");\n\n                this.statusText.textContent = `Connected - Monitoring at ${this.baudRateSelect.value} bps`;\n\n                this.handleBaudRateChange();\n            }\n\n            async messageIn(event) {\n                console.log(\"Message from server:\", event.data);\n\n                const socket_data = new Uint8Array(await event.data.arrayBuffer());\n                console.log(socket_data);\n\n                const id = \"0x\" + ((socket_data[0] << 8) | socket_data[1]).toString(16).padStart(2, '0').toUpperCase();\n                const dataLength = socket_data.length - 2;\n                const data = socket_data.slice(2).map(a => a.toString(16).padStart(2, '0').toUpperCase());\n\n\n                const timestamp = new Date().toLocaleTimeString('th-TH', {\n                    hour12: false,\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit',\n                    fractionalSecondDigits: 3\n                });\n\n                const message = {\n                    timestamp,\n                    id,\n                    data: data.join(' '),\n                    raw: `${timestamp} ${id} [${dataLength}] ${data.join(' ')}`\n                };\n\n                this.addMessage(message);\n            }\n\n            disconnect() {\n                this.connectBtn.textContent = 'Connect';\n                this.connectBtn.classList.remove('connected');\n                this.statusDot.classList.remove('connected');\n                this.statusText.textContent = 'Disconnected';\n\n                this.socket.close();\n                this.socket = null;\n            }\n\n            close() {\n                console.log(\"WebSocket connection closed\");\n            }\n\n            handleBaudRateChange() {\n                if (this.isConnected) {\n                    this.statusText.textContent = `Connected - Monitoring at ${this.baudRateSelect.value} bps`;\n\n                    this.socket.send(\"BAUD:\" + this.baudRateSelect.value);\n                }\n            }\n\n            handleSearch(searchTerm) {\n                this.searchFilter = searchTerm.toLowerCase();\n                this.filterAndDisplayMessages();\n            }\n\n            generateRandomCANMessage(canId) {\n                const canIds = ['0x123', '0x456', '0x789', '0xABC', '0xDEF', '0x111', '0x222', '0x333'];\n                const randomId = canIds[Math.floor(Math.random() * canIds.length)];\n                const dataLength = Math.floor(Math.random() * 8) + 1;\n                const data = [];\n                \n                for (let i = 0; i < dataLength; i++) {\n                    data.push(Math.floor(Math.random() * 256).toString(16).padStart(2, '0').toUpperCase());\n                }\n                \n                const timestamp = new Date().toLocaleTimeString('th-TH', { \n                    hour12: false, \n                    hour: '2-digit', \n                    minute: '2-digit', \n                    second: '2-digit',\n                    fractionalSecondDigits: 3\n                });\n                \n                return {\n                    timestamp,\n                    id: randomId,\n                    data: data.join(' '),\n                    raw: `${timestamp} ${randomId} [${dataLength}] ${data.join(' ')}`\n                };\n            }\n\n            addMessage(message) {\n                this.messages.unshift(message);\n                this.messageCount++;\n                this.messageCountElement.textContent = `Messages: ${this.messageCount}`;\n                \n                // Enable export button when we have messages\n                this.exportBtn.disabled = false;\n                \n                // Keep only last 100 messages for performance\n                if (this.messages.length > 100) {\n                    this.messages = this.messages.slice(0, 100);\n                }\n                \n                this.filterAndDisplayMessages();\n            }\n\n            filterAndDisplayMessages() {\n                this.filteredMessages = this.messages.filter(message => {\n                    if (!this.searchFilter) return true;\n                    return message.raw.toLowerCase().includes(this.searchFilter);\n                });\n                \n                this.displayMessages();\n            }\n\n            displayMessages() {\n                if (this.filteredMessages.length === 0 && this.messages.length === 0) {\n                    this.messageArea.classList.remove('has-content');\n                    this.messageArea.innerHTML = '';\n                    return;\n                }\n                \n                this.messageArea.classList.add('has-content');\n                this.messageArea.innerHTML = this.filteredMessages\n                    .slice(0, 50) // Show only first 50 filtered messages\n                    .map(message => `<div class=\"can-message\">${message.raw}</div>`)\n                    .join('');\n            }\n\n            exportToCSV() {\n                if (this.messages.length === 0) {\n                    alert('\u0e44\u0e21\u0e48\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e2b\u0e49 Export');\n                    return;\n                }\n\n                // Create CSV header\n                const csvHeader = 'Timestamp,CAN ID,Data Length,Data,Raw Message\\n';\n                \n                // Convert messages to CSV format\n                const csvData = this.messages.map(message => {\n                    // Parse the raw message to extract components\n                    const parts = message.raw.split(' ');\n                    const timestamp = parts[0];\n                    const canId = parts[1];\n                    const dataLength = parts[2].replace(/[\\[\\]]/g, ''); // Remove brackets\n                    const data = parts.slice(3).join(' ');\n                    \n                    // Escape commas and quotes in data\n                    const escapedData = `\"${data.replace(/\"/g, '\"\"')}\"`;\n                    const escapedRaw = `\"${message.raw.replace(/\"/g, '\"\"')}\"`;\n                    \n                    return `${timestamp},${canId},${dataLength},${escapedData},${escapedRaw}`;\n                }).join('\\n');\n\n                // Combine header and data\n                const csvContent = csvHeader + csvData;\n\n                // Create and download file\n                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n                const link = document.createElement('a');\n                \n                if (link.download !== undefined) {\n                    const url = URL.createObjectURL(blob);\n                    link.setAttribute('href', url);\n                    \n                    // Generate filename with timestamp\n                    const now = new Date();\n                    const timestamp = now.toISOString().replace(/[:.]/g, '-').slice(0, -5);\n                    link.setAttribute('download', `CAN_Messages_${timestamp}.csv`);\n                    \n                    link.style.visibility = 'hidden';\n                    document.body.appendChild(link);\n                    link.click();\n                    document.body.removeChild(link);\n                    \n                    // Show success message\n                    this.showExportSuccess();\n                }\n            }\n\n            showExportSuccess() {\n                const originalText = this.exportBtn.textContent;\n                this.exportBtn.textContent = 'Exported!';\n                this.exportBtn.style.background = 'linear-gradient(45deg, #4CAF50, #45a049)';\n                \n                setTimeout(() => {\n                    this.exportBtn.textContent = originalText;\n                    this.exportBtn.style.background = 'linear-gradient(45deg, #2196F3, #1976D2)';\n                }, 2000);\n            }\n\n            clearData() {\n                this.messages = [];\n                this.messageCount = 0;\n                this.messageCountElement.textContent = `Messages: ${this.messageCount}`;\n                \n                // Disable export button when we don't have messages\n                this.exportBtn.disabled = true;\n                \n                this.filterAndDisplayMessages();\n            }\n\n            startSimulation() {\n                setInterval(() => {\n                    if (this.isConnected) {\n                        const message = this.generateRandomCANMessage();\n                        this.addMessage(message);\n                    }\n                }, Math.random() * 2000 + 500); // Random interval between 500ms - 2.5s\n            }\n        }\n\n        // Initialize the CAN Sniffer when page loads\n        document.addEventListener('DOMContentLoaded', () => {\n            const sniffer = new CANSniffer();\n            \n            // Initially disable export button\n            sniffer.exportBtn.disabled = true;\n        });\n    </script>\n</body>\n</html>";